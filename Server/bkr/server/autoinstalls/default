#cloud-config
autoinstall:
  version: 1
  identity:
    hostname: {{ system.fqdn }}
    password: {{ password|default(recipe.crypt_root_password(), True) }}
    username: {{ recipe.get_login() }}
  ssh:
    install-server: true
    allow-pw: true
  early-commands:
    - /usr/bin/curl http://{{ lab_controller.fqdn }}:8000/install_start/{{ recipe.id }}
    #curl -O /tmp/anamon https://{{ lab_controller.fqdn }}/beaker/anamon3
    #python3 /tmp/anamon --recipe-id {{ recipe.id }} --xmlrpc-url 'https://{{ lab_controller.fqdn }}/RPC2'
    - /usr/bin/curl -O http://{{ lab_controller.fqdn }}:8000/nopxe/{{ system.fqdn }}
  late-commands:
    - /usr/bin/cp -p /autoinstall.yaml /target
    - /usr/bin/sed -i 's:^root\:\*\::root\:{{ password|default(recipe.crypt_root_password(), True) }}\::' /target/etc/shadow
    # This should work, but "bootlist ... -r" is broken on Ubuntu 20.04, so must use "bootlist ... -o"
    # bootlist -m normal -r $(ofpathname $(ip -brief -o addr show scope global | awk '{print $1}')) $(ofpathname $(df --output=source /target | tail -n1))
    - /usr/sbin/bootlist -m normal -o $(/usr/sbin/ip -brief -o addr show scope global | /usr/bin/awk '{print $1}') $(/usr/bin/lsblk --raw --inverse --output=NAME $(/usr/bin/df --output=source /target/boot/ | /usr/bin/tail -n1) | /usr/bin/tail -n1) || true
    - curtin in-target --target=/target -- /usr/bin/hostnamectl --static set-hostname {{ system.fqdn }}
{% if user.sshpubkeys or recipe and recipe.recipeset.job.group %}
    - mkdir -p /target/root/.ssh
{% if recipe and recipe.recipeset.job.group %}
{% for user in recipe.recipeset.job.group.users %}
{% for ssh_key in user.sshpubkeys %}
    - echo "{{ ssh_key|string|replace('__EOF__', '') }}" >> /target/root/.ssh/authorized_keys
{% endfor %}
{% endfor %}
{% else %}
{% for ssh_key in user.sshpubkeys %}
    - echo "{{ ssh_key|string|replace('__EOF__', '') }}" >> /target/root/.ssh/authorized_keys
{% endfor %}
{% endif %}
    - chmod go-w /target/root /target/root/.ssh /target/root/.ssh/authorized_keys
{% endif %}
    - echo {{ recipe.id }} > /target/root/RECIPE.TXT
    - echo "export BEAKER_LAB_CONTROLLER_URL=\"http://{{ lab_controller.fqdn }}:8000\"" >>/target/etc/profile.d/beaker-harness-env.sh
    - echo "export BEAKER_LAB_CONTROLLER={{ lab_controller.fqdn }}" >>/target/etc/profile.d/beaker-harness-env.sh
    - echo "export BEAKER_RECIPE_ID={{ recipe.id }}" >>/target/etc/profile.d/beaker-harness-env.sh
    - echo "export BEAKER_HUB_URL=\"https://{{ lab_controller.fqdn }}\"" >>/target/etc/profile.d/beaker-harness-env.sh
    - echo "export RHTS_OPTION_COMPATIBLE=" >>/target/etc/profile.d/beaker-harness-env.sh
    - echo "export RHTS_OPTION_COMPAT_SERVICE=" >>/target/etc/profile.d/beaker-harness-env.sh
    - echo -n >/target/etc/profile.d/beaker.sh
    - echo "export BEAKER=\"{{ absolute_url('/', labdomain=True) }}\"" >>/target/etc/profile.d/beaker.sh
    - echo "export BEAKER_JOB_WHITEBOARD=''" >>/target/etc/profile.d/beaker.sh
    - echo "export BEAKER_RECIPE_WHITEBOARD=''" >>/target/etc/profile.d/beaker.sh
    - echo -n >/target/etc/profile.d/task-overrides-rhts.sh
    - echo "export RHTS_OPTION_COMPATIBLE=">>/target/etc/profile.d/task-overrides-rhts.sh
    - echo "export RHTS_OPTION_COMPAT_SERVICE=">>/target/etc/profile.d/task-overrides-rhts.sh
    - echo "deb [trusted=yes] {{ absolute_url('/') }}harness/{{ distro.osversion.osmajor }} /" >> /target/etc/apt/sources.list
    - wget --no-check-certificate -r -l1 -np -nH -e robots=off -A '*crt' --cut-dirs=2 -P /target/usr/local/share/ca-certificates/ {{ absolute_url('/certs') }}
    - curtin in-target --target=/target -- update-ca-certificates
    - curtin in-target --target=/target -- /usr/bin/apt update
    - curtin in-target --target=/target -- /usr/bin/apt install make restraint restraint-rhts
    - curtin in-target --target=/target -- /usr/bin/systemctl enable restraintd
    - /usr/bin/curl http://{{ lab_controller.fqdn }}:8000/postinstall_done/{{ recipe.id }}
    - sleep 10
